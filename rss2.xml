<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>北冥の鱼</title>
    <link>https://yueyueniao0223.me/</link>
    
    <atom:link href="https://yueyueniao0223.me/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>北冥有鱼，化而为鸟</description>
    <pubDate>Mon, 24 May 2021 16:33:01 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>反射</title>
      <link>https://yueyueniao0223.me/2021/05/25/reflect/</link>
      <guid>https://yueyueniao0223.me/2021/05/25/reflect/</guid>
      <pubDate>Mon, 24 May 2021 16:33:01 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.2.1/images/image-20210525002237262.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该思维导图的在线链接：&lt;a href=&quot;https://s</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.2.1/images/image-20210525002237262.png"/></p><p>该思维导图的在线链接：<a href="https://share.mubu.com/doc/7GrYLgtlw9X">https://share.mubu.com/doc/7GrYLgtlw9X</a></p><h3 id="反射为何物"><a href="#反射为何物" class="headerlink" title="反射为何物"></a>反射为何物</h3><p>Java反射机制在程序运行时，对于任何一个类，都能知道这个类的所有属性和方法；对于任何一个对象，都能调用它的任何一个方法和属性。这种<strong>动态获取信息</strong>以及<strong>动态调用对象</strong>的功能称为Java反射机制。</p><p>为了更好地理解反射，我们不妨看下Oracle官方文档</p><blockquote><p><strong>Reflection</strong> is commonly used by programs which require the ability to examine or modify the <strong>runtime behavior</strong> of applications running in the Java virtual machine. This is a relatively advanced feature and should be used only by developers who have a strong grasp of the fundamentals of the language. With that caveat in mind, reflection is a powerful technique and can enable applications to perform operations which would otherwise be impossible.</p></blockquote><p>反射一般用于检查或修改程序在JVM运行时的行为。如果我们知道了反射，并且了解了其原理，那么我们便可完成一些不可能的事情。正因为其如此强大，因此反射不可滥用！</p><h3 id="反射有何用"><a href="#反射有何用" class="headerlink" title="反射有何用"></a>反射有何用</h3><p>依旧是官方文档，反射的作用主要有以下三点~</p><blockquote><p><strong>Extensibility Features</strong></p><p>An application may make use of external, user-defined classes by creating instances of extensibility objects using their fully-qualified names.</p><p><strong>Class Browsers and Visual Development Environments</strong></p><p>A class browser needs to be able to enumerate the members of classes. Visual development environments can benefit from making use of type information available in reflection to aid the developer in writing correct code.</p><p><strong>Debuggers and Test Tools</strong></p><p>Debuggers need to be able to examine private members on classes. Test harnesses can make use of reflection to systematically call a discoverable set APIs defined on a class, to insure a high level of code coverage in a test suite.</p></blockquote><p>1.可以通过外部类的全限定名来创建对象，并使用这些对象来完成一些扩展功能</p><p>2.可以枚举类的所有成员，包括方法、变量、构造函数。可视化的环境有益于让开发者写出正确的代码。</p><p>3.可以更好地提高测试覆盖率，通过反射，测试工具可以系统地调用在类上定义的可发现的API。</p><p>小结一下：反射并不是只有Java中才有，许多其他的编程语言也都提供了反射功能。</p><h3 id="反射该何用"><a href="#反射该何用" class="headerlink" title="反射该何用"></a>反射该何用</h3><p>这里我们先创建一个Person类方便举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">public</span> String test_1;<span class="comment">//测试公有属性1</span></span><br><span class="line">    <span class="keyword">public</span> String test_2;<span class="comment">//测试公有属性2</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试私有方法能否被访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取类的Class实例对象"><a href="#获取类的Class实例对象" class="headerlink" title="获取类的Class实例对象"></a>获取类的Class实例对象</h4><p>该对象是在类加载的时候由JVM自动构造的，有了这个Class实例对象，通过该实例对象我们就可以访问类的成员了。获取Class实例对象的方法有三种，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接通过 类.class 获取</span></span><br><span class="line">Class clz_1 = Person.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 Class.forName(&quot;xxx&quot;) 获取，其中xxx指类的路径 注意该方法会抛出ClassNotFoundException异常</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    Class clz_2 = Class.forName(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 类实例.getClass() 获取</span></span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">Class clz_3 = person.getClass();</span><br></pre></td></tr></table></figure><h4 id="创建反射类对象"><a href="#创建反射类对象" class="headerlink" title="创建反射类对象"></a>创建反射类对象</h4><p>有两种方法，其中通过构造器创建对象可以实现有参构造。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先获取Class对象实例</span></span><br><span class="line">Class clz_1 = Person.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Class对象.newInstance()方法只能调用无参构造方法，另外还会抛出异常，这里简单打印异常</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    Person person_1 = (Person) clz_1.newInstance();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过构造器创建反射类对象</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可以获得无参构造器</span></span><br><span class="line">    Constructor constructor_1 = clz_1.getConstructor();</span><br><span class="line">    Person person_1 = (Person) constructor_1.newInstance();</span><br><span class="line">    <span class="comment">//可以获得有参构造器</span></span><br><span class="line">    Constructor constructor_2 = clz_1.getConstructor(String.class, <span class="keyword">int</span>.class, String.class);</span><br><span class="line">    Person person_2 = (Person) constructor_2.newInstance(<span class="string">&quot;Tom&quot;</span>, <span class="number">18</span>, <span class="string">&quot;123@qq.com&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取反射对象的属性"><a href="#获取反射对象的属性" class="headerlink" title="获取反射对象的属性"></a>获取反射对象的属性</h4><div class="table-container"><table><thead><tr><th></th><th>访问方法的个数</th><th>访问方法的权限</th></tr></thead><tbody><tr><td>getField()</td><td>1个</td><td>public修饰的属性</td></tr><tr><td>getDeclaredField()</td><td>1个</td><td>全部属性</td></tr><tr><td>getFields()</td><td>多个</td><td>public修饰的属性</td></tr><tr><td>getDeclaredFields()</td><td>多个</td><td>全部的属性</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//依旧先获取Class对象实例</span></span><br><span class="line">Class clz_1 = Person.class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.print(<span class="string">&quot;getField()获取反射对象的test_1属性类型:&quot;</span>);</span><br><span class="line">    Field field_1 = clz_1.getField(<span class="string">&quot;test_1&quot;</span>);</span><br><span class="line">    System.out.print(field_1.getType());</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    System.out.print(<span class="string">&quot;getDeclaredField()获取反射对象的age属性类型:&quot;</span>);</span><br><span class="line">    Field field_2 = clz_1.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    System.out.print(field_2.getType());</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    System.out.print(<span class="string">&quot;getFields()获取反射对象的属性:&quot;</span>);</span><br><span class="line">    Field[] field_3 = clz_1.getFields();</span><br><span class="line">    Arrays.asList(field_3).forEach(field -&gt; System.out.print(field.getName() + <span class="string">&quot;, &quot;</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    System.out.print(<span class="string">&quot;getDeclaredFields()获取反射对象的属性:&quot;</span>);</span><br><span class="line">    Field[] field_4 = clz_1.getDeclaredFields();</span><br><span class="line">    Arrays.asList(field_4).forEach(field -&gt; System.out.print(field.getName() + <span class="string">&quot;, &quot;</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.2/images/image-20210524232136202.png"/></p><h4 id="获取反射对象的方法"><a href="#获取反射对象的方法" class="headerlink" title="获取反射对象的方法"></a>获取反射对象的方法</h4><div class="table-container"><table><thead><tr><th></th><th>访问方法的个数</th><th>访问方法的权限</th></tr></thead><tbody><tr><td>getMethod()</td><td>1个</td><td>public修饰的方法，包括父类以及父接口中的public方法</td></tr><tr><td>getDeclaredMethod()</td><td>1个</td><td>全部的方法，除了遗传方法，即父类中的方法</td></tr><tr><td>getMethods()</td><td>多个</td><td>public修饰的方法，包括父类以及父接口中的public方法</td></tr><tr><td>getDeclaredMethods()</td><td>多个</td><td>全部的方法，除了遗传方法，即父类中的方法</td></tr></tbody></table></div><p>大家可以自行测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;依旧先获取Class对象实例</span><br><span class="line">Class clz_1 &#x3D; Person.class;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">            System.out.print(&quot;getMethod()获取反射对象的getAge方法返回类型&quot;);</span><br><span class="line">            Method method_1 &#x3D; clz_1.getMethod(&quot;getAge&quot;);</span><br><span class="line">            System.out.print(method_1.getReturnType());</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">            System.out.print(&quot;getDeclaredMethod()获取反射对象的test方法返回类型：&quot;);</span><br><span class="line">            Method method_2 &#x3D; clz_1.getDeclaredMethod(&quot;test&quot;);</span><br><span class="line">            System.out.print(method_2.getReturnType());</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">            System.out.print(&quot;getMethods()获取反射对象的方法:&quot;);</span><br><span class="line">            Method[] method_3 &#x3D; clz_1.getMethods();</span><br><span class="line">            Arrays.asList(method_3).forEach(method -&gt; System.out.print(method.getName() + &quot;, &quot;));</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">            System.out.print(&quot;getDeclaredMethods()获取反射对象的方法:&quot;);</span><br><span class="line">            Method[] method_4 &#x3D; clz_1.getDeclaredMethods();</span><br><span class="line">            Arrays.asList(method_4).forEach(method -&gt; System.out.print(method.getName() + &quot;, &quot;));</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>打印结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.2/images/image-20210524231605222.png"/></p><p>可能会有疑问，明明getDeclaredMethods()可以获取到非公有方法，而getMethods()只能获取public方法，这么算起来，前者应该输出更多的方法！但，并不是如此，细看getMethods()输出，有hashCode、getClass方法，这一些方法是Object类中的公共方法，而Object类是所有类的父类，因此，getMethods()也会输出Object类中的方法，除此之外，如果Person类也继承了其他类，也会输出其父类的所有公有方法。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>前面其实有提到在一个类加载的时候，JVM会帮我们生成Class对象并加载到内存中，这相当于提供该类的各种数据的访问接口，而反射实际上就是获取该对象。这也是为什么使用反射之前都要先获取Class对象的原因了。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>在平时的项目开发中，数据库连接、Spring框架都有用到反射；在学习面向对象编程的时候，使用反射也能让我们的代码符合开闭性，即不修改代码的前提下，通过配置文件的方式便可以做到。当然除此之外，还有很多地方也用到了反射。</p><p>关于反射的内容就基本上结束了，希望能够帮助大家更好地理解反射，如果其中存在问题请留下你的评论，我会及时修正，另外如果你有其他建议也可以评论留言~</p><p>参考：</p><p><a href="https://juejin.cn/post/6844904005294882830">Java 反射由浅入深</a></p><p><a href="https://docs.oracle.com/javase/tutorial/reflect/index.html">Oracle官方文档</a></p>]]></content:encoded>
      
      
      <category domain="https://yueyueniao0223.me/categories/Java/">Java</category>
      
      
      <category domain="https://yueyueniao0223.me/tags/Java%E7%B3%BB%E5%88%97/">Java系列</category>
      
      <category domain="https://yueyueniao0223.me/tags/%E5%8F%8D%E5%B0%84/">反射</category>
      
      
      <comments>https://yueyueniao0223.me/2021/05/25/reflect/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>每日1题[字符串的排序]</title>
      <link>https://yueyueniao0223.me/2021/02/11/leetcode-everyday-2021-02-11/</link>
      <guid>https://yueyueniao0223.me/2021/02/11/leetcode-everyday-2021-02-11/</guid>
      <pubDate>Thu, 11 Feb 2021 03:43:40 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;h2 id=&quot;字符串的排列&quot;&gt;&lt;a href=&quot;#字符串的排列&quot; class=&quot;headerlink&quot; title=&quot;字符串的排列&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/permutation-i</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><h2 id="字符串的排列"><a href="#字符串的排列" class="headerlink" title="字符串的排列"></a><a href="https://leetcode-cn.com/problems/permutation-in-string/">字符串的排列</a></h2><p>给定两个字符串 <strong>s1</strong> 和 <strong>s2</strong>，写一个函数来判断 <strong>s2</strong> 是否包含 <strong>s1</strong> 的排列。</p><p>换句话说，第一个字符串的排列之一是第二个字符串的子串。</p><p>示例：</p><blockquote><p>输入: s1 = “ab” s2 = “eidbaooo”<br>输出: True<br>解释: s2 包含 s1 的排列之一 (“ba”).</p></blockquote><p><strong>注意：</strong></p><ol><li>输入的字符串只包含小写字母</li><li>两个字符串的长度都在 [1, 10,000] 之间</li></ol></blockquote><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><ul><li>因为要判断s2中是否有s1的排序，那么<strong>至少s2的长度要比s1长</strong>，否则不存在s1是s2子串这一种说法</li><li>在s2中采用<strong>滑动窗口</strong>的方式选择长度为s1.length()的字符串s3</li><li>需要注意的是，这里并非直接与s1进行对应位置字符的比较，而是只需要包含s1中元素的排列即可，那这咋整？排列中不仅包含元素，还包含了元素的个数，想到这，问题就简单了，我们只需要分别统计s3与s1中出现的字符及其对应个数，然后再两两比较就能够知道问题的答案了！</li></ul><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkInclusion</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s1.length(), m = s2.length();</span><br><span class="line">        <span class="keyword">if</span> (n &gt; m) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] cnt1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">int</span>[] cnt2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            ++cnt1[s1.charAt(i) - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            ++cnt2[s2.charAt(i) - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Arrays.equals(cnt1, cnt2)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; m; ++i) &#123;</span><br><span class="line">            ++cnt2[s2.charAt(i) - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            --cnt2[s2.charAt(i - n) - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (Arrays.equals(cnt1, cnt2)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进行优化的过程"><a href="#进行优化的过程" class="headerlink" title="进行优化的过程"></a>进行优化的过程</h3><p>算法思路：这里我们使用了两个数组，每次移动窗口的时候，我们都会将两个数组进行比较，而实际上，每次移动窗口时，只有移出窗口的字符以及移进窗口的字符在数组中所对应的值发生改变，那么我们是否考虑只用一个数组完成这样的统计呢？不妨试一试！</p><p>接下来是思考的过程（可以直接跳过，看下面优化后的算法步骤），首先判断s2的长度是否大于s1的长度，如果小，那么直接返回false；然后我们首先采用一个数组cnt，依旧采用滑动窗口的方式，先进行初始化，如果字符位于s1中，对应值减一，如果位于s2中，对应值加一；正式开始移动窗口前，我们需要判断当前cnt中是否所有的值都为0，如果是，则直接返回true；接着开始移动窗口，移出窗口字符所对应的值减一，移进窗口字符所对应的值加一，每次移动一次窗口，继续遍历一次cnt数组，确定是否所有的值都为0，如果是则返回true；如果窗口移动到最后，cnt中所有的值都不是0，则返回false。</p><p>这样其实节省了一个数组的空间，但依旧没有解决每次都要遍历数组所有内容的问题，不行！不可以就这样结束！一定还有其他办法！</p><p>这里我们可以使用一个整型变量diff，用于记录数组cnt中有多少个不为0的值，这样，需要遍历整个cnt才能知道是否所有的值为0变为只需要判断diff变量是否为0的问题了！具体请查看优化后的算法步骤~</p><h3 id="优化后的算法步骤"><a href="#优化后的算法步骤" class="headerlink" title="优化后的算法步骤"></a>优化后的算法步骤</h3><ul><li>首先判断s2的长度是否大于s1的长度，如果小，那么直接返回false</li><li>然后采用一个数组cnt，采用滑动窗口方式，并进行初始化，如果字符位于s1中，对应值减一，如果位于s2中，对应值加一</li><li>正式开始移动窗口前，我们需要判断当前cnt中是否所有的值都为0，如果是，则直接返回true</li><li>采用diff变量，统计cnt中不为0的值的个数</li><li>判断diff变量是否为0，如果为0直接返回true</li><li>正式移动窗口，如果字符x移出窗口前所对应的值cnt[x-‘a’]等于0，那么其移出后必然导致cnt[x-‘a’]不为0，所以我们在移出前需要将diff加一；如果在移出字符x后，对应的cnt[x-‘a’]等于0，那么我们需要将diff减一;同理移进窗口y也是如此</li><li>移动一次窗口后，判断diff是否为0，如果是，直接返回true</li><li>如果窗口移动到最后，diff也不为0，则返回false</li></ul><p>下面是java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkInclusion</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        #s2长度要比s1大，否则不存在子串一说</span><br><span class="line">        <span class="keyword">if</span>(s2.length() &lt; s1.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        #cnt数组保存字符a-z所出现的次数</span><br><span class="line">        <span class="keyword">int</span>[] cnt = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">int</span> length = s1.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            --cnt[s1.charAt(i) - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            ++cnt[s2.charAt(i) - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> diff = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : cnt)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num != <span class="number">0</span>)</span><br><span class="line">                ++diff;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(diff == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = length; i &lt; s2.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = s2.charAt(i - length) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">int</span> y = s2.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(x == y)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt[x] == <span class="number">0</span>)&#123;</span><br><span class="line">                ++diff;</span><br><span class="line">            &#125;</span><br><span class="line">            --cnt[x];</span><br><span class="line">            <span class="keyword">if</span>(cnt[x] == <span class="number">0</span>)&#123;</span><br><span class="line">                --diff;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt[y] == <span class="number">0</span>)&#123;</span><br><span class="line">                ++diff;</span><br><span class="line">            &#125;</span><br><span class="line">            ++cnt[y];</span><br><span class="line">            <span class="keyword">if</span>(cnt[y] == <span class="number">0</span>)&#123;</span><br><span class="line">                --diff;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(diff == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://yueyueniao0223.me/tags/%E5%8A%9B%E6%89%A3/">力扣</category>
      
      <category domain="https://yueyueniao0223.me/tags/java/">java</category>
      
      <category domain="https://yueyueniao0223.me/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/">每日一题</category>
      
      
      <comments>https://yueyueniao0223.me/2021/02/11/leetcode-everyday-2021-02-11/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>剑指offer系列</title>
      <link>https://yueyueniao0223.me/2021/02/09/leetcode-lcof/</link>
      <guid>https://yueyueniao0223.me/2021/02/09/leetcode-lcof/</guid>
      <pubDate>Tue, 09 Feb 2021 01:56:08 GMT</pubDate>
      
      <description>记录力扣刷题的收获</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><h4 id="剑指-Offer-04-二维数组中的查找"><a href="#剑指-Offer-04-二维数组中的查找" class="headerlink" title="剑指 Offer 04. 二维数组中的查找"></a><a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">剑指 Offer 04. 二维数组中的查找</a></h4><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p></blockquote><p>拿到这道题，先不管它三七二十一，先来一通暴力破解法再说，即直接全数组遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; matrix[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] == target)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但越想越气，明明给定了每一行与每一列的排列顺序，如果直接全局遍历，那么这个条件不就相当于没给吗，复杂度还是O(n * m)？！不行不行，一定要用上！</p><p>那么该怎么用呢？首先每一行最右侧的数一定是这一行最大的，每一列最下面的数也一定是这一列最大的，那么我们可以从数组右上角开始比较，如果matrix[i] [j] &lt; target,我们就寻找这一列下面的数（即i++），如果matrix[i] [j] &gt; target，那么我们就寻找这一行靠前一些的数（即j—），这样我们就用上了这个条件，时间复杂度也降为了O(n + m)，即访问到的下标的行最多增加n次，访问到的列最多减少m次，因此循环体最多执行n+m次，不多说，上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = matrix[<span class="number">0</span>].length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; matrix.length &amp;&amp; j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[i][j] == target)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(matrix[i][j] &gt; target)</span><br><span class="line">                j--;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://yueyueniao0223.me/categories/leetcode/">leetcode</category>
      
      
      <category domain="https://yueyueniao0223.me/tags/Java/">Java</category>
      
      <category domain="https://yueyueniao0223.me/tags/%E5%8A%9B%E6%89%A3/">力扣</category>
      
      
      <comments>https://yueyueniao0223.me/2021/02/09/leetcode-lcof/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>单机区域路径覆盖仿真</title>
      <link>https://yueyueniao0223.me/2021/02/02/area-cover1/</link>
      <guid>https://yueyueniao0223.me/2021/02/02/area-cover1/</guid>
      <pubDate>Tue, 02 Feb 2021 05:31:41 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;路径规划需要解决的问题&quot;&gt;&lt;a href=&quot;#路径规划需要解决的问题&quot; class=&quot;headerlink&quot; title=&quot;路径规划需要解决的问题&quot;&gt;&lt;/a&gt;路径规划需要解决的问题&lt;/h2&gt;&lt;p&gt;1）使得机器人能够从初始位置运动到目标位置&lt;/p&gt;
&lt;p&gt;2）绕开障</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="路径规划需要解决的问题"><a href="#路径规划需要解决的问题" class="headerlink" title="路径规划需要解决的问题"></a>路径规划需要解决的问题</h2><p>1）使得机器人能够从初始位置运动到目标位置</p><p>2）绕开障碍物，并且经过某些必须经过的点，完成相应的作业任务</p><p>3）在完成上述任务的前提下，尽量优化机器人的运行轨迹</p><h2 id="路径规划类别"><a href="#路径规划类别" class="headerlink" title="路径规划类别"></a>路径规划类别</h2><p>根据不同的目的，我们可以将路径规划分为两类，一类是点到点的路径规划，另外一类是完全遍历路径规划</p><h3 id="点到点的路径规划"><a href="#点到点的路径规划" class="headerlink" title="点到点的路径规划"></a>点到点的路径规划</h3><p>点到点的路径规划，即寻找一条从起始点到终点的最优路径，路径代价最小、距离最短、时间最少。主要方法包括了DFS、BFS、GBFS、Dijkstra、A*算法等，这里先留一个坑，之后再做详细介绍，有兴趣的可以先从下面这篇文章了解：</p><p><a href="https://zhuanlan.zhihu.com/p/346666812">图搜索算法：DFS、BFS、GBFS、Dijkstra、A*</a></p><h3 id="完全遍历路径规划"><a href="#完全遍历路径规划" class="headerlink" title="完全遍历路径规划"></a>完全遍历路径规划</h3><p>完全遍历路径规划，即在满足某种性能指标最优的前提下，在设定区域内寻找一条从起始点到终点且经过所有可达区域的连续路径。方式包括两大类，一类是随机碰撞法，另一类是路径规划法</p><h4 id="随机碰撞法"><a href="#随机碰撞法" class="headerlink" title="随机碰撞法"></a>随机碰撞法</h4><p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.1/images/image-20210201111627364.png" alt="image-20210201111627364 " style="zoom:50%;" /></p><p>随机碰撞法也称为随机碰撞式导航，但这并非指机器人真正与环境中的物体产生碰撞，也非毫无章法地在可运动区域随机移动，而是指机器人根据一定的移动算法，在遇到障碍的时候，执行对应的转向函数。</p><p>其<strong>优点</strong>在于不计时间的前提下达到100%的覆盖率，对于环境也不需要建立环境地图，同时也不需要进行实时定位</p><p>其<strong>缺点</strong>在于其移动路径基本依靠内置的算法，算法的优劣决定了其覆盖的效率以及质量的高低。</p><h4 id="路径规划法"><a href="#路径规划法" class="headerlink" title="路径规划法"></a>路径规划法</h4><p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.1/images/image-20210201111720243.png" alt="image-20210201111720243" style="zoom:50%;" /></p><p>路径规划法即依据环境地图，并实时定位。</p><p>目前运用的比较多的路径规划方法包括：基于栅格法的路径规划、人工势场法、模板模型法、人工智能法等，下面将主要介绍本次仿真所用到的方法——栅格法</p><h2 id="栅格法仿真"><a href="#栅格法仿真" class="headerlink" title="栅格法仿真"></a>栅格法仿真</h2><p><strong>定义</strong>：将机器人可运动的空间划分一个个方块形区域，规划过程中可以将机器人看成一个质点，对于环境中障碍物边界可以做相应的扩展以及模糊化的处理，目的是使得障碍物边界可以与栅格单元边缘重合。</p><p><strong>优点</strong>：实现简单，对于不规则的障碍物也可以进行表示</p><p><strong>缺点</strong>：栅格的大小设置会影响到环境信息存储量以及规划时间的长短。如果栅格设置过大，那么环境信息存储量会变小，在密集环境下发现路径的能力降低；而栅格设置过小，尽管在密集环境下发现路径的能力较强，但对应的环境信息存储量会变大，规划所需要的时间也会增加。</p><p>下面就是我们正式的单机器人栅格法仿真了~</p><p>步骤包括：</p><p>1）创建地图，用二维数组存储各个栅格值，将可运动空间值设置为0，不可运行区域设置为None，运动过的区域设置为0.5（可重复运动）</p><p>2）遍历地图，这里将选择最长的边作为起始边，减少转弯次数，并设置起始运动方向与该起始边平行</p><p>3）梳形轨迹覆盖地图，可以设置遍历方向，往同一方向覆盖，直至遇到障碍，然后调整相对方向，目前调整的相对方向包括右上，上，左上，需要注意的是转弯之后需要再次转弯，以形成梳形轨迹</p><p>4）遇到死胡同且空间未被完全覆盖的时候，重新调整为相反方向，尝试覆盖。</p><p>以下是仿真的结果</p><p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.1/images/image-20210201114052768.png" alt="image-20210201114052768" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.1/images/image-20210201114102391.png" alt="image-20210201114102391 " style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.1/images/image-20210201114110114.png" alt="image-20210201114135646 " style="zoom:50%;" /></p><p>实现的代码如下：</p><p>gridMap.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GridMap</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, width, height, resolution, center_x, center_y, init_val=<span class="number">0.0</span></span>):</span></span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">        self.resolution = resolution</span><br><span class="line">        self.center_x = center_x</span><br><span class="line">        self.center_y = center_y</span><br><span class="line"></span><br><span class="line">        self.left_lower_x = self.center_x - self.width / <span class="number">2.0</span> * self.resolution</span><br><span class="line">        self.left_lower_y = self.center_y - self.height / <span class="number">2.0</span> * self.resolution</span><br><span class="line"></span><br><span class="line">        self.ndata = self.width * self.height</span><br><span class="line">        self.data = [init_val] * self.ndata</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_value_from_xy_index</span>(<span class="params">self, x_ind, y_ind</span>):</span></span><br><span class="line">        grid_ind = self.calc_grid_index_from_xy_index(x_ind,y_ind)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span>&lt;= grid_ind &lt; self.ndata:</span><br><span class="line">            <span class="keyword">return</span> self.data[grid_ind]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc_grid_index_from_xy_index</span>(<span class="params">self, x_ind, y_ind</span>):</span></span><br><span class="line">        grid_ind = <span class="built_in">int</span>(y_ind * self.width + x_ind)</span><br><span class="line">        <span class="keyword">return</span> grid_ind</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_value_from_xy_index</span>(<span class="params">self, x_ind, y_ind, val</span>):</span></span><br><span class="line">        <span class="keyword">if</span> (x_ind <span class="keyword">is</span> <span class="literal">None</span>) <span class="keyword">or</span> (y_ind <span class="keyword">is</span> <span class="literal">None</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>,<span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        grid_ind = <span class="built_in">int</span>(y_ind * self.width + x_ind)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= grid_ind &lt; self.ndata:</span><br><span class="line">            self.data[grid_ind] = val</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_value_from_polygon</span>(<span class="params">self, pol_x, pol_y, val, inside=<span class="literal">True</span></span>):</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#形成密闭空间</span></span><br><span class="line">        <span class="keyword">if</span> (pol_x[<span class="number">0</span>] != pol_x[-<span class="number">1</span>]) <span class="keyword">or</span> (pol_y[<span class="number">0</span>] != pol_y[-<span class="number">1</span>]):</span><br><span class="line">            pol_x.append(pol_x[<span class="number">0</span>])</span><br><span class="line">            pol_y.append(pol_y[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> x_ind <span class="keyword">in</span> <span class="built_in">range</span>(self.width):</span><br><span class="line">            <span class="keyword">for</span> y_ind <span class="keyword">in</span> <span class="built_in">range</span>(self.height):</span><br><span class="line">                x_pos, y_pos = self.calc_grid_central_xy_position_from_xy_index(x_ind, y_ind)</span><br><span class="line">                flag = self.check_inside_polygon(x_pos, y_pos, pol_x, pol_y)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> flag <span class="keyword">is</span> inside:</span><br><span class="line">                    self.set_value_from_xy_index(x_ind, y_ind, val)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_inside_polygon</span>(<span class="params">iox, ioy, x, y</span>):</span></span><br><span class="line">        npoint = <span class="built_in">len</span>(x) - <span class="number">1</span></span><br><span class="line">        inside = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i1 <span class="keyword">in</span> <span class="built_in">range</span>(npoint):</span><br><span class="line">            i2 = (i1 + <span class="number">1</span>) % (npoint + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> x[i1] &gt;= x[i2]:</span><br><span class="line">                min_x, max_x = x[i2], x[i1]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                min_x, max_x = x[i1], x[i2]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> min_x &lt; iox &lt; max_x:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">                </span><br><span class="line">            tmp1 = (y[i2] - y[i1]) / (x[i2] -x[i1])</span><br><span class="line">            <span class="keyword">if</span>(y[i1] + tmp1 * (iox - x[i1]) - ioy) &gt; <span class="number">0.0</span>:</span><br><span class="line">                inside = <span class="keyword">not</span> inside</span><br><span class="line">        <span class="keyword">return</span> inside</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc_grid_central_xy_position_from_xy_index</span>(<span class="params">self, x_ind, y_ind</span>):</span></span><br><span class="line">        x_pos = self.calc_grid_central_xy_position_from_index(x_ind, self.left_lower_x)</span><br><span class="line">        y_pos = self.calc_grid_central_xy_position_from_index(y_ind, self.left_lower_y)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x_pos, y_pos</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc_grid_central_xy_position_from_index</span>(<span class="params">self, index, lower_pos</span>):</span></span><br><span class="line">        <span class="keyword">return</span> lower_pos + index * self.resolution + self.resolution / <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_xy_index_from_xy_pos</span>(<span class="params">self,x_pos,y_pos</span>):</span></span><br><span class="line">        x_ind = self.calc_xy_index_from_position(x_pos, self.left_lower_x, self.width)</span><br><span class="line">        y_ind = self.calc_xy_index_from_position(y_pos, self.left_lower_y, self.height)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x_ind,y_ind</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc_xy_index_from_position</span>(<span class="params">self, pos, lower_pos, max_index</span>):</span></span><br><span class="line">        ind = <span class="built_in">int</span>(np.floor((pos - lower_pos) / self.resolution))</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= ind &lt;= max_index:</span><br><span class="line">            <span class="keyword">return</span> ind</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plot_grid_map</span>(<span class="params">self, ax=<span class="literal">None</span></span>):</span></span><br><span class="line">        grid_data = np.reshape(np.array(self.data),(self.height,self.width))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ax:</span><br><span class="line">            fig, ax = plt.subplots()</span><br><span class="line">        heat_map = ax.pcolor(grid_data, cmap=<span class="string">&quot;Blues&quot;</span>, vmin=<span class="number">0.0</span>, vmax=<span class="number">1.0</span>)</span><br><span class="line">        plt.axis(<span class="string">&quot;equal&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> heat_map</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_grid_map_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;width:&quot;</span>, self.width)</span><br><span class="line">        print(<span class="string">&quot;height:&quot;</span>, self.height)</span><br><span class="line">        print(<span class="string">&quot;resolution:&quot;</span>, self.resolution)</span><br><span class="line">        print(<span class="string">&quot;center_x:&quot;</span>, self.center_x)</span><br><span class="line">        print(<span class="string">&quot;center_y:&quot;</span>, self.center_y)</span><br><span class="line">        print(<span class="string">&quot;left_lower_x:&quot;</span>, self.left_lower_x)</span><br><span class="line">        print(<span class="string">&quot;left_lower_y:&quot;</span>, self.left_lower_y)</span><br><span class="line">        print(<span class="string">&quot;ndata:&quot;</span>, self.ndata)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_occupied_from_xy_index</span>(<span class="params">self, x_ind,y_ind,occupied_val = <span class="number">1.0</span></span>):</span></span><br><span class="line">        val = self.get_value_from_xy_index(x_ind,y_ind)</span><br><span class="line">        <span class="keyword">if</span> val <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> val &gt;= occupied_val:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">expand_grid</span>(<span class="params">self</span>):</span></span><br><span class="line">        xinds, yinds = [], []</span><br><span class="line">        <span class="keyword">for</span> ix <span class="keyword">in</span> <span class="built_in">range</span>(self.width):</span><br><span class="line">            <span class="keyword">for</span> iy <span class="keyword">in</span> <span class="built_in">range</span>(self.height):</span><br><span class="line">                <span class="keyword">if</span> self.check_occupied_from_xy_index(ix, iy):</span><br><span class="line">                    xinds.append(ix)</span><br><span class="line">                    yinds.append(iy)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(ix, iy) <span class="keyword">in</span> <span class="built_in">zip</span>(xinds, yinds):</span><br><span class="line">            self.set_value_from_xy_index(ix + <span class="number">1</span>, iy, val=<span class="number">1.0</span>)</span><br><span class="line">            self.set_value_from_xy_index(ix, iy + <span class="number">1</span>, val=<span class="number">1.0</span>)</span><br><span class="line">            self.set_value_from_xy_index(ix + <span class="number">1</span>, iy + <span class="number">1</span>, val=<span class="number">1.0</span>)</span><br><span class="line">            self.set_value_from_xy_index(ix - <span class="number">1</span>, iy, val=<span class="number">1.0</span>)</span><br><span class="line">            self.set_value_from_xy_index(ix, iy - <span class="number">1</span>, val=<span class="number">1.0</span>)</span><br><span class="line">            self.set_value_from_xy_index(ix - <span class="number">1</span>, iy - <span class="number">1</span>, val=<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ox = [<span class="number">0.0</span>, <span class="number">20.0</span>, <span class="number">50.0</span>, <span class="number">100.0</span>, <span class="number">130.0</span>, <span class="number">40.0</span>]</span><br><span class="line">    oy = [<span class="number">0.0</span>, -<span class="number">20.0</span>, <span class="number">0.0</span>, <span class="number">30.0</span>, <span class="number">60.0</span>, <span class="number">80.0</span>]</span><br><span class="line"></span><br><span class="line">    grid_map = GridMap(<span class="number">600</span>, <span class="number">290</span>, <span class="number">0.7</span>, <span class="number">60.0</span>, <span class="number">30.5</span>)</span><br><span class="line"></span><br><span class="line">    grid_map.set_value_from_polygon(ox, oy, <span class="number">1.0</span>, inside=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    grid_map.plot_grid_map()</span><br><span class="line"></span><br><span class="line">    plt.axis(<span class="string">&quot;equal&quot;</span>)</span><br><span class="line">    plt.grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>path_planner.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math </span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> IntEnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.spatial.transform <span class="keyword">import</span> Rotation <span class="keyword">as</span> Rot</span><br><span class="line"><span class="keyword">from</span> gridMap <span class="keyword">import</span> GridMap</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">do_animation = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cover</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Direction</span>(<span class="params">IntEnum</span>):</span></span><br><span class="line">        Up = <span class="number">1</span></span><br><span class="line">        DOWN = -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MovingDirection</span>(<span class="params">IntEnum</span>):</span></span><br><span class="line">        RIGHT = <span class="number">1</span></span><br><span class="line">        LEFT = -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, moving_direction, direction, x_inds_gol_y,goal_y</span>):</span></span><br><span class="line">        self.moving_direction = moving_direction</span><br><span class="line">        self.direction = direction</span><br><span class="line">        self.turning_window = []</span><br><span class="line">        self.update_turning_window()</span><br><span class="line">        self.x_indexes_goal_y = x_inds_gol_y</span><br><span class="line">        self.goal_y = goal_y</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_safe_turning_grid</span>(<span class="params">self, c_x_index, c_y_index, grid_map</span>):</span></span><br><span class="line">        <span class="keyword">for</span> (d_x_ind, d_y_ind) <span class="keyword">in</span> self.turning_window:</span><br><span class="line">            next_x_ind = d_x_ind + c_x_index</span><br><span class="line">            next_y_ind = d_y_ind + c_y_index</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> grid_map.check_occupied_from_xy_index(next_x_ind,next_y_ind,occupied_val = <span class="number">0.5</span>):</span><br><span class="line">                <span class="keyword">return</span> next_x_ind, next_y_ind</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_turning_window</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.turning_window = [</span><br><span class="line">            (self.moving_direction,<span class="number">0.0</span>),</span><br><span class="line">            (self.moving_direction, self.direction),</span><br><span class="line">            <span class="comment"># (0, self.direction),</span></span><br><span class="line">            (-self.moving_direction, self.direction),</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swap_moving_direction</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.moving_direction *= -<span class="number">1</span></span><br><span class="line">        self.update_turning_window()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_target_grid</span>(<span class="params">self, c_x_index, c_y_index, grid_map</span>):</span></span><br><span class="line">        n_x_index = self.moving_direction + c_x_index</span><br><span class="line">        n_y_index = c_y_index</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> grid_map.check_occupied_from_xy_index(n_x_index,n_y_index,occupied_val=<span class="number">0.5</span>):</span><br><span class="line">            <span class="keyword">return</span> n_x_index,n_y_index</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            next_c_x_index, next_c_y_index = self.find_safe_turning_grid(c_x_index,c_y_index,grid_map)</span><br><span class="line">            <span class="comment">#退一格</span></span><br><span class="line">            <span class="keyword">if</span>(next_c_x_index <span class="keyword">is</span> <span class="literal">None</span>) <span class="keyword">and</span> (next_c_y_index <span class="keyword">is</span> <span class="literal">None</span>):</span><br><span class="line">                next_c_x_index = -self.moving_direction + c_x_index</span><br><span class="line">                next_c_y_index = c_y_index</span><br><span class="line">                <span class="keyword">if</span> grid_map.check_occupied_from_xy_index(next_c_x_index,next_c_y_index):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">None</span>,<span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">not</span> grid_map.check_occupied_from_xy_index(</span><br><span class="line">                        next_c_x_index + self.moving_direction, </span><br><span class="line">                        next_c_y_index,occupied_val=<span class="number">0.5</span>):</span><br><span class="line">                    next_c_x_index += self.moving_direction</span><br><span class="line">                self.swap_moving_direction()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> next_c_x_index,next_c_y_index</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_search_done</span>(<span class="params">self, grid_map</span>):</span></span><br><span class="line">        <span class="keyword">for</span> ix <span class="keyword">in</span> self.x_indexes_goal_y:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> grid_map.check_occupied_from_xy_index(ix, self.goal_y,occupied_val = <span class="number">0.5</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_start_grid</span>(<span class="params">self, grid_map</span>):</span></span><br><span class="line">        x_inds = []</span><br><span class="line">        y_ind = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> self.direction == self.Direction.DOWN:</span><br><span class="line">            x_inds, y_ind = search_free_grid_index_at_edge_y(grid_map, from_upper=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">elif</span> self.direction == self.Direction.Up:</span><br><span class="line">            x_inds, y_ind = search_free_grid_index_at_edge_y(grid_map, from_upper=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.moving_direction == self.MovingDirection.RIGHT:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">min</span>(x_inds), y_ind</span><br><span class="line">        <span class="keyword">elif</span> self.moving_direction == self.MovingDirection.LEFT:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(x_inds), y_ind</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ValueError(<span class="string">&quot;self.moving direction is invalid &quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_search_done</span>(<span class="params">self, grid_map</span>):</span></span><br><span class="line">        <span class="keyword">for</span> ix <span class="keyword">in</span> self.x_indexes_goal_y:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> grid_map.check_occupied_from_xy_index(ix, self.goal_y, occupied_val = <span class="number">0.5</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_direction_and_start_pos</span>(<span class="params">ox, oy</span>):</span></span><br><span class="line">    max_dist = <span class="number">0.0</span></span><br><span class="line">    vec = [<span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line">    start_pos = [<span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line">    <span class="comment">#找到最长的那条边</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ox) - <span class="number">1</span>):</span><br><span class="line">        dx = ox[i + <span class="number">1</span>] - ox[i]</span><br><span class="line">        dy = oy[i + <span class="number">1</span>] - oy[i]</span><br><span class="line">        d = np.hypot(dx, dy)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> d &gt; max_dist:</span><br><span class="line">            max_dist = d</span><br><span class="line">            vec = [dx, dy]</span><br><span class="line">            start_pos = [ox[i], oy[i]] </span><br><span class="line">    <span class="keyword">return</span> vec,start_pos</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_grid_coordinate</span>(<span class="params">ox, oy, vec, start_position</span>):</span></span><br><span class="line">    tx = [ix - start_position[<span class="number">0</span>] <span class="keyword">for</span> ix <span class="keyword">in</span> ox]</span><br><span class="line">    ty = [iy - start_position[<span class="number">1</span>] <span class="keyword">for</span> iy <span class="keyword">in</span> oy]</span><br><span class="line">    th = math.atan2(vec[<span class="number">1</span>], vec[<span class="number">0</span>])</span><br><span class="line">    rot = Rot.from_euler(<span class="string">&#x27;z&#x27;</span>, th).as_matrix()[<span class="number">0</span>:<span class="number">2</span>, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    converted_xy = np.stack([tx, ty]).T @ rot</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> converted_xy[:, <span class="number">0</span>], converted_xy[:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_free_grid_index_at_edge_y</span>(<span class="params">grid_map, from_upper=<span class="literal">False</span></span>):</span></span><br><span class="line">    y_index = <span class="literal">None</span></span><br><span class="line">    x_indexes = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> from_upper:</span><br><span class="line">        x_range = <span class="built_in">range</span>(grid_map.height)[::-<span class="number">1</span>]</span><br><span class="line">        y_range = <span class="built_in">range</span>(grid_map.width)[::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x_range = <span class="built_in">range</span>(grid_map.height)</span><br><span class="line">        y_range = <span class="built_in">range</span>(grid_map.width)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> iy <span class="keyword">in</span> x_range:</span><br><span class="line">        <span class="keyword">for</span> ix <span class="keyword">in</span> y_range:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> grid_map.check_occupied_from_xy_index(ix, iy):</span><br><span class="line">                y_index = iy</span><br><span class="line">                x_indexes.append(ix)</span><br><span class="line">        <span class="keyword">if</span> y_index:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> x_indexes, y_index</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_grid_map</span>(<span class="params">ox, oy, resolution, direction, offset_grid=<span class="number">10</span></span>):</span></span><br><span class="line">    width = math.ceil(<span class="built_in">max</span>(ox) - <span class="built_in">min</span>(ox) / resolution) + offset_grid</span><br><span class="line">    height = math.ceil(<span class="built_in">max</span>(oy) - <span class="built_in">min</span>(oy) / resolution) + offset_grid</span><br><span class="line">    center_x = (np.<span class="built_in">max</span>(ox) + np.<span class="built_in">min</span>(ox)) / <span class="number">2.0</span></span><br><span class="line">    center_y = (np.<span class="built_in">max</span>(oy) + np.<span class="built_in">min</span>(oy)) / <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">    grid_map = GridMap(width,height,resolution,center_x,center_y)</span><br><span class="line">    grid_map.print_grid_map_info()</span><br><span class="line">    grid_map.set_value_from_polygon(ox, oy, <span class="number">1.0</span>, inside=<span class="literal">False</span>)</span><br><span class="line">    grid_map.expand_grid()</span><br><span class="line"></span><br><span class="line">    x_inds_goal_y = []</span><br><span class="line">    goal_y = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> direction == Cover.Direction.Up:</span><br><span class="line">        x_inds_goal_y, goal_y = search_free_grid_index_at_edge_y(grid_map, from_upper=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">elif</span> direction == Cover.Direction.DOWN:</span><br><span class="line">        x_inds_goal_y, goal_y = search_free_grid_index_at_edge_y(grid_map, from_upper=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> grid_map, x_inds_goal_y, goal_y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">path_search</span>(<span class="params">searcher, grid_map, grid_search_animation=<span class="literal">False</span></span>):</span></span><br><span class="line">    c_x_index, c_y_index = searcher.search_start_grid(grid_map)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> grid_map.set_value_from_xy_index(c_x_index, c_y_index, <span class="number">0.5</span>):</span><br><span class="line">        print(<span class="string">&quot;Cannot find start grid&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> [],[]</span><br><span class="line">    </span><br><span class="line">    x,y = grid_map.calc_grid_central_xy_position_from_xy_index(c_x_index, c_y_index)</span><br><span class="line"></span><br><span class="line">    px,py = [x], [y]</span><br><span class="line">    fig, ax = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> grid_search_animation:</span><br><span class="line">        fig, ax =plt.subplots()</span><br><span class="line">        fig.canvas.mpl_connect(<span class="string">&#x27;key_release_event&#x27;</span>, <span class="keyword">lambda</span> event: [exit(<span class="number">0</span>) <span class="keyword">if</span> event.key == <span class="string">&#x27;escape&#x27;</span> <span class="keyword">else</span> <span class="literal">None</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c_x_index, c_y_index = searcher.move_target_grid(c_x_index,c_y_index,grid_map)</span><br><span class="line">        <span class="keyword">if</span> searcher.is_search_done(grid_map) <span class="keyword">or</span> (c_x_index <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> c_y_index <span class="keyword">is</span> <span class="literal">None</span>):</span><br><span class="line">            print(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        x,y = grid_map.calc_grid_central_xy_position_from_xy_index(c_x_index, c_y_index)</span><br><span class="line"></span><br><span class="line">        px.append(x)</span><br><span class="line">        py.append(y)</span><br><span class="line"></span><br><span class="line">        grid_map.set_value_from_xy_index(c_x_index,c_y_index, <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> grid_search_animation:</span><br><span class="line">            grid_map.plot_grid_map(ax = ax)</span><br><span class="line">            plt.pause(<span class="number">0.5</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> px, py</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_global_coordinate</span>(<span class="params">x, y, vec, start_position</span>):</span></span><br><span class="line">    th = math.atan2(vec[<span class="number">1</span>], vec[<span class="number">0</span>])</span><br><span class="line">    rot = Rot.from_euler(<span class="string">&#x27;z&#x27;</span>, -th).as_matrix()[<span class="number">0</span>:<span class="number">2</span>, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    converted_xy = np.stack([x, y]).T @ rot</span><br><span class="line">    rx = [ix + start_position[<span class="number">0</span>] <span class="keyword">for</span> ix <span class="keyword">in</span> converted_xy[:, <span class="number">0</span>]]</span><br><span class="line">    ry = [iy + start_position[<span class="number">1</span>] <span class="keyword">for</span> iy <span class="keyword">in</span> converted_xy[:, <span class="number">1</span>]]</span><br><span class="line">    <span class="keyword">return</span> rx, ry</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">planning</span>(<span class="params">ox, oy, resolution, moving_direction = Cover.MovingDirection.RIGHT,</span></span></span><br><span class="line"><span class="function"><span class="params">             direction = Cover.Direction.Up</span>):</span></span><br><span class="line">    vec, start_position = find_direction_and_start_pos(ox, oy)</span><br><span class="line">    rox, roy = convert_grid_coordinate(ox, oy, vec, start_position)</span><br><span class="line">    grid_map, x_inds_goal_y, goal_y = setup_grid_map(rox, roy, resolution, direction)</span><br><span class="line"></span><br><span class="line">    searcher = Cover(moving_direction, direction, x_inds_goal_y, goal_y)</span><br><span class="line">    px, py = path_search(searcher, grid_map)</span><br><span class="line">    rx, ry = convert_global_coordinate(px, py, vec, start_position)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;Path length:&quot;</span>, <span class="built_in">len</span>(rx))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rx, ry</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">planning_animation</span>(<span class="params">ox, oy, resolution</span>):</span></span><br><span class="line">    px, py = planning(ox, oy, resolution, direction=Cover.Direction.Up)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> ipx,ipy <span class="keyword">in</span> <span class="built_in">zip</span>(px, py):</span><br><span class="line">        plt.cla()</span><br><span class="line">        plt.gcf().canvas.mpl_connect(<span class="string">&#x27;key_release_event&#x27;</span>,</span><br><span class="line">            <span class="keyword">lambda</span> event:[exit(<span class="number">0</span>) <span class="keyword">if</span> event.key == <span class="string">&#x27;escape&#x27;</span> <span class="keyword">else</span> <span class="literal">None</span>])</span><br><span class="line">        plt.plot(ox,oy, <span class="string">&#x27;-xb&#x27;</span>)</span><br><span class="line">        plt.plot(px,py,<span class="string">&#x27;-r&#x27;</span>)</span><br><span class="line">        plt.plot(ipx,ipy,<span class="string">&#x27;or&#x27;</span>)</span><br><span class="line">        plt.axis(<span class="string">&quot;equal&quot;</span>)</span><br><span class="line">        plt.grid(<span class="literal">True</span>)</span><br><span class="line">        plt.pause(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">    plt.cla()</span><br><span class="line">    plt.plot(ox, oy, <span class="string">&quot;-xb&quot;</span>)</span><br><span class="line">    plt.plot(px, py, <span class="string">&quot;-r&quot;</span>)</span><br><span class="line">    plt.axis(<span class="string">&quot;equal&quot;</span>)</span><br><span class="line">    plt.grid(<span class="literal">True</span>)</span><br><span class="line">    plt.pause(<span class="number">0.1</span>)</span><br><span class="line">    <span class="comment"># plt.close()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    print(<span class="string">&quot;start!!!&quot;</span>)</span><br><span class="line">    <span class="comment">#长方形区域</span></span><br><span class="line">    <span class="comment"># ox = [0.0,200.0,200.0,0.0,0.0]</span></span><br><span class="line">    <span class="comment"># oy = [0.0, 0.0, 60.0, 60.0, 0.0]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ox = [0.0, 20.0, 50.0, 100.0, 130.0, 40.0, 0.0]</span></span><br><span class="line">    <span class="comment"># oy = [0.0, -20.0, 0.0, 30.0, 60.0, 80.0, 0.0]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#正凸形    </span></span><br><span class="line">    ox = [<span class="number">0.0</span>, <span class="number">200.0</span>, <span class="number">200.0</span>, <span class="number">150.0</span>, <span class="number">150.0</span>, <span class="number">50.0</span>, <span class="number">50.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line">    oy = [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">60.0</span>, <span class="number">60.0</span>, <span class="number">120.0</span>, <span class="number">120.0</span>, <span class="number">60.0</span>, <span class="number">60.0</span>, <span class="number">0.0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#倒凸形</span></span><br><span class="line">    <span class="comment"># ox = [0.0, 150.0, 150.0, 100.0, 100.0, 50.0, 50.0, 0.0, 0.0] </span></span><br><span class="line">    <span class="comment"># oy = [120.0, 120.0, 60.0, 60.0, 0.0, 0.0, 60.0, 60.0, 120.0]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#此情况下无法全覆盖</span></span><br><span class="line">    <span class="comment"># ox = [0.0, 150.0, 150.0, 100.0, 100.0, 50.0, 50.0, 0.0, 0.0]</span></span><br><span class="line">    <span class="comment"># oy = [0.0, 0.0, 120.0, 120.0, 60.0, 60.0, 120.0, 120.0, 0.0]</span></span><br><span class="line"></span><br><span class="line">    resolution = <span class="number">5.0</span></span><br><span class="line">    planning_animation(ox, oy, resolution)</span><br><span class="line">    plt.show()</span><br><span class="line">    print(<span class="string">&quot;done!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>需要说明的是，我们对于遇到死胡同且区域未被完全覆盖时处理的方法只是简单地进行回退，即牛耕式全覆盖算法，但这样会出现下面的情况，即回退也无法到达未覆盖区域；另外采用直接回退的方式也会造成更高的重复覆盖率。</p><p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.1.1/images/image-20210131161031259.png" alt="image-20210131161031259" style="zoom:50%;" /></p><p>对于这种情况，可行的解决办法是，基于当前死胡同所处的点，采用A*算法，寻找抵达未被覆盖区域的路径，然后再进行梳形覆盖。</p><p><strong>参考文献</strong>：</p><p>[1]MA Quankun, ZHANG Yanfei, GONG Jinliang. Traversal path planning of agricultural robot based on memory simulated annealing and A* algorithm. Journal of South China Agricultural University, 2020, 41(4): 127-132.</p><p>[2]朱宝艳,李彩虹,王小宇,宋莉.基于栅格的移动机器人区域分解遍历算法[J].山东理工大学学报(自然科学版),2017,31(04):13-18.</p><p>[3]马全坤,张彦斐,宫金良.基于记忆模拟退火和A~*算法的农业机器人遍历路径规划[J].华南农业大学学报,2020,41(04):127-132.</p><p>[4]QIAN J Y, ZHOU Z D, ZHAO L Z, et al. Accelerating reconfiguration for VLSI arrays with A‐star algorithm[J]. IEEJ T Electr Electr, 2018, 13(10): 1511-1519. </p><p>[5]陈泽涛. 改进生成树算法的多机器人在线地图覆盖[D].齐齐哈尔大学,2016.</p>]]></content:encoded>
      
      
      <category domain="https://yueyueniao0223.me/categories/%E5%8C%BA%E5%9F%9F%E8%A6%86%E7%9B%96/">区域覆盖</category>
      
      
      <category domain="https://yueyueniao0223.me/tags/%E5%8C%BA%E5%9F%9F%E8%A6%86%E7%9B%96/">区域覆盖</category>
      
      <category domain="https://yueyueniao0223.me/tags/Java/">Java</category>
      
      
      <comments>https://yueyueniao0223.me/2021/02/02/area-cover1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>搜索技巧</title>
      <link>https://yueyueniao0223.me/2021/01/27/searchSkill/</link>
      <guid>https://yueyueniao0223.me/2021/01/27/searchSkill/</guid>
      <pubDate>Wed, 27 Jan 2021 12:49:58 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;你是否遇到过在网站搜索栏中输入关键字，但是却出现了一堆与自己不想要的东西，是不是很苦恼呢？快看看下面的搜索指令，提升一下自己的搜索技巧，会让你检索信息的能力更高哦！这里使用的浏览器为谷歌。&lt;/p&gt;
&lt;p&gt;ps：文末也会有关于百度与谷歌浏览器检索的区别对比哦！&lt;/p&gt;
&lt;h4</description>
        
      
      
      
      <content:encoded><![CDATA[<p>你是否遇到过在网站搜索栏中输入关键字，但是却出现了一堆与自己不想要的东西，是不是很苦恼呢？快看看下面的搜索指令，提升一下自己的搜索技巧，会让你检索信息的能力更高哦！这里使用的浏览器为谷歌。</p><p>ps：文末也会有关于百度与谷歌浏览器检索的区别对比哦！</p><h4 id="自行进行分词留空"><a href="#自行进行分词留空" class="headerlink" title="自行进行分词留空"></a>自行进行分词留空</h4><p>如果我们需要查找的内容关键词是相对独立的或者对于查找内容中间部分不太记得了，那么就可以尝试这种方式，如下</p><p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.0/images/image-20210127164043756.png" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.0/images/image-20210127163946528.png" alt="image-20210127163946528 " style="zoom:50%;" /></p><h4 id="尝试英文检索"><a href="#尝试英文检索" class="headerlink" title="尝试英文检索"></a>尝试英文检索</h4><p>例如我们查找论文的时候，如果中文查找到的内容匹配度较低，那么就可以将关键字转换为英文</p><p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.0/images/image-20210127163620899.png" alt="image-20210127163620899" style="zoom:50%;" /></p><h4 id="使用英文双引号””进行标题内容包含匹配"><a href="#使用英文双引号””进行标题内容包含匹配" class="headerlink" title="使用英文双引号””进行标题内容包含匹配"></a>使用英文双引号””进行标题内容包含匹配</h4><blockquote><p>格式：”关键字 关键字”</p></blockquote><p>如果想搜索文章标题中包含关键字，而不是仅仅在预览内容中包含关键字的话，就可以加上英文双引号</p><p>不加之前的检索结果，如下第二条内容标红区域，标题中并未包含“WWE”</p><p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.0/images/image-20210127165038583.png" alt="image-20210127165038583" style="zoom:50%;" /></p><p>加上后的检索结果</p><p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.0/images/image-20210127165125330.png" alt="image-20210127165125330" style="zoom:50%;" /></p><h4 id="使用英文连接符-去除关键字"><a href="#使用英文连接符-去除关键字" class="headerlink" title="使用英文连接符-去除关键字"></a>使用英文连接符-去除关键字</h4><blockquote><p>格式：关键字 -关键字</p></blockquote><p>如下，不使用-连接符之前，搜索内容中会出现Java相关内容</p><p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.0/images/image-20210127164341783.png" alt="image-20210127164341783" style="zoom:50%;" /></p><p>使用后检索结果：</p><p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.0/images/image-20210127164534869.png" alt="image-20210127164534869" style="zoom:50%;" /></p><h4 id="使用-模糊查询"><a href="#使用-模糊查询" class="headerlink" title="使用*模糊查询"></a>使用*模糊查询</h4><blockquote><p>格式：关键字*关键字</p></blockquote><p>效果与第1点（自行进行分词）差不多</p><p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.0/images/image-20210127165428368.png" alt="image-20210127165428368" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.0/images/image-20210127170600567.png" alt="image-20210127170600567" style="zoom:49%;" /></p><h4 id="使用site在特定网站上查找"><a href="#使用site在特定网站上查找" class="headerlink" title="使用site在特定网站上查找"></a>使用site在特定网站上查找</h4><blockquote><p>格式：site:网址 关键词</p></blockquote><p>这种搜索方式更具有针对性，将搜索的访问限定在了特定的站点中</p><p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.0/images/image-20210127165807749.png" alt="image-20210127165807749" style="zoom:50%;" /></p><h4 id="搜索特定文件类型"><a href="#搜索特定文件类型" class="headerlink" title="搜索特定文件类型"></a>搜索特定文件类型</h4><blockquote><p>格式：filetype:文件类型 关键词</p></blockquote><p>用于搜索特定文件类型，像谷歌的话，支持大多数类型的网页和文件内容，包括：</p><p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.0/images/image-20210127103130955.png" alt="image-20210127103130955" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/yueyueniao0223/CDN@1.0/images/image-20210127170110738.png" alt="image-20210127170110738" style="zoom:50%;" /></p><hr><p>接下来是吐槽时间~</p><p>谷歌给了你想要的，百度给了你它想给你的，这句话也不是没有道理的。</p><p>1.首先是页面排名的区别</p><p>目前，百度竞价排名已经成为效果很好、投资回报也极高的网络推广服务，但相对的，百度竞价排行的成本也相对较高。对于百度而言，只要企业广告的出价越高，广告的排名也越靠前，除此之外，百度本身也有很多的服务，例如百度百科，百度知道，百度贴吧等生产的服务，这些网站在百度搜索中权重也较高；而谷歌则不仅仅考虑企业的广告出价，更多地考虑广告的质量以及相关性，同时除了Youtube，谷歌不去做内容，也就保证了网站排名的相对公平。</p><p>2.其次对于原创文章重视程度也不同</p><p>我们在百度中查找内容时，经常在检索出来的第一条看到的是转载内容。而谷歌则不然，它很重视原创文章的网站，对于转载其他站点上文章的网站，会要求标明原创作品的出处，也就保证了检索出来的网站中，原创网站会排名靠前。</p><p>3.另外百度与谷歌所面临的监管环境不同</p><p>国内的网络审查比较严，一部分有用的网站无法检索到；而谷歌则作为全球最大的搜索引擎，面向的是全球，其收录的内容不是百度所能比拟的。</p><p>当然，百度作为目前国内最大的商业化全文搜索引擎，也是全球最大的中文搜索引擎，对于我们日常的中文检索，其速度以及便捷性是很高的，而谷歌则需要借助于VPN才能顺利使用。想必各位找到一个好用的VPN不是一件难事，hhh</p><p>到最后总结一下吧~如果涉及到专业前沿内容的话，强烈建议大家使用谷歌！</p><p>参考内容：</p><p><a href="https://www.885.com/a/365824.html">百度跟谷歌搜索引擎有什么差异性？ 市场需求的不同造成的结果</a></p><p><a href="https://blog.csdn.net/slqgenius/article/details/51619383">浅谈谷歌与百度在搜索引擎排名方面的区别</a></p><p><a href="https://www.zhihu.com/question/20140749">Google 搜索比百度搜索好在哪些地方</a></p>]]></content:encoded>
      
      
      <category domain="https://yueyueniao0223.me/categories/%E6%95%99%E7%A8%8B/">教程</category>
      
      
      <category domain="https://yueyueniao0223.me/tags/%E6%90%9C%E7%B4%A2/">搜索</category>
      
      <category domain="https://yueyueniao0223.me/tags/%E6%95%99%E7%A8%8B/">教程</category>
      
      
      <comments>https://yueyueniao0223.me/2021/01/27/searchSkill/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>个人博客介绍</title>
      <link>https://yueyueniao0223.me/2021/01/23/introduction/</link>
      <guid>https://yueyueniao0223.me/2021/01/23/introduction/</guid>
      <pubDate>Sat, 23 Jan 2021 07:25:26 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;大家好呀，马上就要过农历新年了，不知道大家在过去的一年里还有什么愿望没有实现呢？&lt;/p&gt;
&lt;p&gt;2020是不平凡的一年，因为突如其来的新冠疫情，呆在家里将近九个月。九个月，二百七十天，即便是在家也可以做做自己喜欢的事情，但回望这在家的九个月，除了上课，似乎就在不知不觉中度过</description>
        
      
      
      
      <content:encoded><![CDATA[<p>大家好呀，马上就要过农历新年了，不知道大家在过去的一年里还有什么愿望没有实现呢？</p><p>2020是不平凡的一年，因为突如其来的新冠疫情，呆在家里将近九个月。九个月，二百七十天，即便是在家也可以做做自己喜欢的事情，但回望这在家的九个月，除了上课，似乎就在不知不觉中度过了，有点后悔自己没有好好利用这段时间去做做自己喜欢的事情……</p><p>那么问题来了，我喜欢做什么呢？我可以去做点什么呢？一下子给我惊住了，平时那么多喜欢做的事情，但要细细数来，还真想不到。</p><p>想了又想，不如做个自己的个人网站吧！可以用来记录自己平时遇到的问题，另外还很酷^-^ 这个是重点！之前有段时间是在CSDN上做的个人博客，但它的博客编写保存机制着实让我想吐槽一下，不能快捷ctrl+s保存，还得手动点击，不要问我为什么记得这么清楚……懂的都懂了，于是更加让我想做一个自己的网站，自由且有成就！</p><p>于是乎有了<strong>北冥の鱼</strong>，主要用来记录与分享学习与生活，跟大家一起成长━(<em>｀∀´</em>)ノ亻</p>]]></content:encoded>
      
      
      <category domain="https://yueyueniao0223.me/categories/%E6%9D%82%E8%AE%B0/">杂记</category>
      
      
      
      <comments>https://yueyueniao0223.me/2021/01/23/introduction/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
